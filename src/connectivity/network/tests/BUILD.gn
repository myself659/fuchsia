# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_library.gni")
import("//build/test.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

group("netemul_empty_binaries") {
  write_file("$root_out_dir/netstack_no_network_test", "")
}

executable("netstack_no_network_test_client") {
  testonly = true

  sources = [
    "netstack_no_network_test_client.cc",
  ]

  deps = [
    "//garnet/lib/inet",
    "//third_party/googletest:gtest_main",
  ]
}

rustc_library("netstack_fidl_integration") {
  testonly = true
  with_unit_tests = true
  edition = "2018"

  deps = [
    "//garnet/public/lib/fidl/rust/fidl",
    "//garnet/public/rust/fuchsia-async",
    "//garnet/public/rust/fuchsia-component",
    "//garnet/public/rust/fuchsia-zircon",
    "//sdk/fidl/fuchsia.netstack:fuchsia.netstack-rustc",
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//src/connectivity/network/testing/netemul/lib/fidl:environment-rustc",
    "//src/connectivity/network/testing/netemul/lib/fidl:network-rustc",
    "//src/connectivity/network/testing/netemul/lib/fidl:sandbox-rustc",
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:futures-preview",
    "//zircon/public/fidl/fuchsia-hardware-ethernet:fuchsia-hardware-ethernet-rustc",
    "//zircon/public/fidl/fuchsia-net:fuchsia-net-rustc",
    "//zircon/public/fidl/fuchsia-net-stack:fuchsia-net-stack-rustc",
  ]
}

static_library("socket_test_util") {
  include_dirs = [ "//vendor/gvisor" ]

  testonly = true
  sources = [
    "//vendor/gvisor/test/syscalls/linux/socket_test_util.cc",
    "//vendor/gvisor/test/syscalls/linux/socket_test_util.h",
  ]

  public_deps = [
    #     "//net/util",  # gvisor:google-only(Internal)
    "//third_party/abseil-cpp/absl/strings:str_format",
    "//third_party/googletest:gtest",

    #     "//third_party/absl/memory",
    #     "//third_party/absl/strings",
    #     "//third_party/absl/time",
    #     "//third_party/golang/gvisor/test/util:file_descriptor",
    #     "//third_party/golang/gvisor/test/util:posix_error",
    #     "//third_party/golang/gvisor/test/util:temp_path",
    #     "//third_party/golang/gvisor/test/util:test_util",
    #     "//third_party/golang/gvisor/test/util:thread_util",
  ]
}

static_library("ip_socket_test_util") {
  include_dirs = [ "//vendor/gvisor" ]

  testonly = true
  sources = [
    "//vendor/gvisor/test/syscalls/linux/ip_socket_test_util.cc",
    "//vendor/gvisor/test/syscalls/linux/ip_socket_test_util.h",
  ]

  deps = [
    ":socket_test_util",
    #     "//third_party/absl/strings",
  ]
}

test("readv_socket_test") {
  testonly = true
  sources = [
    "//vendor/gvisor/test/syscalls/linux/file_base.h",
    "//vendor/gvisor/test/syscalls/linux/readv_common.cc",
    "//vendor/gvisor/test/syscalls/linux/readv_common.h",
    "//vendor/gvisor/test/syscalls/linux/readv_socket.cc",
  ]
}

# "//vendor/gvisor/test/syscalls/linux/socket_abstract.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_blocking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_filesystem.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_generic.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_generic.h",
# "//vendor/gvisor/test/syscalls/linux/socket_inet_loopback.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_loopback_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_generic.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_generic.h",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_generic_loopback.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_loopback.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_loopback_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_loopback_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_tcp_udp_generic.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_udp_generic.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_udp_generic.h",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_udp_loopback.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_udp_loopback_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ip_udp_loopback_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_tcp_unbound_external_networking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_tcp_unbound_external_networking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_tcp_unbound_external_networking_test.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound.h",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_external_networking_test.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_ipv4_udp_unbound_loopback.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_non_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_non_blocking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_non_stream.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_non_stream.h",
# "//vendor/gvisor/test/syscalls/linux/socket_non_stream_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_non_stream_blocking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_stream.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_stream.h",
# "//vendor/gvisor/test/syscalls/linux/socket_stream_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_stream_blocking.h",
# "//vendor/gvisor/test/syscalls/linux/socket_stream_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_stream_nonblock.h",
# "//vendor/gvisor/test/syscalls/linux/socket_unix.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix.h",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_abstract.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_abstract_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_blocking_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_dgram.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_dgram.h",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_dgram_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_dgram_non_blocking.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_domain.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_filesystem.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_filesystem_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_non_stream.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_non_stream.h",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_non_stream_blocking_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_pair.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_pair_nonblock.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_seqpacket.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_seqpacket.h",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_seqpacket_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_stream.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_stream_blocking_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_stream_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_stream_nonblock_local.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_unbound_abstract.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_unbound_dgram.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_unbound_filesystem.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_unbound_seqpacket.cc",
# "//vendor/gvisor/test/syscalls/linux/socket_unix_unbound_stream.cc",
# "//vendor/gvisor/test/syscalls/linux/tcp_socket.cc",
# "//vendor/gvisor/test/syscalls/linux/udp_socket.cc",
# "//vendor/gvisor/test/syscalls/linux/unix_domain_socket_test_util.cc",
# "//vendor/gvisor/test/syscalls/linux/unix_domain_socket_test_util.h",

# "//third_party/abseil-cpp/absl",
# "//third_party/abseil-cpp/absl/base:core_headers",
# "//third_party/abseil-cpp/absl/base:endian",
# "//third_party/abseil-cpp/absl/memory",
# "//third_party/abseil-cpp/absl/strings",
# "//third_party/abseil-cpp/absl/time",
# "//third_party/gflags",
# "//third_party/googletest:gmock",

test("netstack_bsdsocket_c_api_test") {
  if (is_linux || is_fuchsia) {
    sources = [
      # "//vendor/gvisor/test/syscalls/linux/raw_socket_ipv4.cc",
      # "//vendor/gvisor/test/syscalls/linux/sendfile_socket.cc",
      # "//vendor/gvisor/test/syscalls/linux/socket_netdevice.cc",
      # "//vendor/gvisor/test/syscalls/linux/socket_netlink_route.cc",
      # "//vendor/gvisor/test/syscalls/linux/socket_netlink_util.cc",
      # "//vendor/gvisor/test/syscalls/linux/socket_netlink_util.h",
      "bsdsocket_test.cc",
      "util.cc",
      "util.h",
    ]
  }

  deps = [
    "//third_party/googletest:gtest_main",
  ]
}

test("netstack_fuchsia_c_api_test") {
  sources = [
    "fdio_test.cc",
    "ioctl_test.cc",
    "util.cc",
    "util.h",
  ]

  deps = [
    "//garnet/public/lib/netstack/c",
    "//third_party/googletest:gtest_main",
    "//zircon/public/fidl/fuchsia-net:fuchsia-net_c",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/sync",
  ]
}

test_package("netstack_integration_tests") {
  deps = [
    ":netstack_fidl_integration",
  ]

  tests = [
    {
      name = "netstack_fidl_integration_lib_test"
      environments = [ qemu_env ]
    },
  ]
}

test_package("netstack_c_api_tests") {
  deps = [
    ":netemul_empty_binaries",
    ":netstack_bsdsocket_c_api_test",
    ":netstack_fuchsia_c_api_test",
    ":netstack_no_network_test_client",
  ]

  binaries = [
    {
      name = "netstack_no_network_test_client"
    },
  ]

  meta = [
    {
      path = rebase_path("meta/netstack_no_network_test_client.cmx")
      dest = "netstack_no_network_test_client.cmx"
    },
  ]

  tests = [
    {
      name = "netstack_bsdsocket_c_api_test"
      environments = [ qemu_env ]
    },
    {
      name = "netstack_fuchsia_c_api_test"
      environments = [ qemu_env ]
    },
    {
      name = "netstack_no_network_test"
      environments = [ qemu_env ]
    },
  ]
}
