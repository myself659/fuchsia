// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace midi {

enum class Direction : uint8_t {
  SOURCE = 1u,
  SINK = 2u,
};


class Device;

extern "C" const fidl_type_t fuchsia_hardware_midi_DeviceGetDirectionResponseTable;

class Device final {
 public:

  struct GetDirectionResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    Direction direction;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_midi_DeviceGetDirectionResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetDirectionRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    // Get direction of the MIDI device
    zx_status_t GetDirection(Direction* out_direction);

    // Get direction of the MIDI device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetDirectionResponse> GetDirection(::fidl::BytePart _response_buffer, Direction* out_direction);

    // Get direction of the MIDI device
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetDirectionResponse> GetDirection(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // Get direction of the MIDI device
    static zx_status_t GetDirection(zx::unowned_channel _client_end, Direction* out_direction);

    // Get direction of the MIDI device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetDirectionResponse> GetDirection(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, Direction* out_direction);

    // Get direction of the MIDI device
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetDirectionResponse> GetDirection(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Device;
    using _Base = ::fidl::CompleterBase;

    class GetDirectionCompleterBase : public _Base {
     public:
      void Reply(Direction direction);
      void Reply(::fidl::BytePart _buffer, Direction direction);
      void Reply(::fidl::DecodedMessage<GetDirectionResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetDirectionCompleter = ::fidl::Completer<GetDirectionCompleterBase>;

    virtual void GetDirection(GetDirectionCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace midi
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::midi::Device::GetDirectionResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::midi::Device::GetDirectionResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::midi::Device::GetDirectionResponse)
    == ::llcpp::fuchsia::hardware::midi::Device::GetDirectionResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::midi::Device::GetDirectionResponse, direction) == 16);

}  // namespace fidl
